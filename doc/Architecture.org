
* Environment

application will be split in two main parts: backend and frontend

** Backend environment 

+ Tomcat
+ Jersey
+ Java


*** Service layout

services provide GET/POST/PUT/... mechanism to the system

#+BEGIN_SRC java
  package services;

  import java.util.Collection;

  import javax.annotation.PostConstruct;
  import javax.servlet.ServletContext;
  import javax.ws.rs.GET;
  import javax.ws.rs.POST;
  import javax.ws.rs.Path;
  import javax.ws.rs.Produces;
  import javax.ws.rs.core.Context;
  import javax.ws.rs.core.MediaType;


  // import models

  // import database

  @Path("/products") // specify pathnn of service (like: "/users", "/products" ...)
  public class SampleService {
      @Context
	  ServletContext ctx;

	  public SampleService() {
	  }

	  @PostConstruct
	  public void init() {
		  // initialize database if it is not initialized already
		  if (ctx.getAttribute("db") == null) {
		      String contextPath = ctx.getRealPath(""); // or semohow else get path
			  ctx.setAttribute("db", new FileSystemStorage(contextPath));
		  }
	  }

	  @GET
	  @Path("/")
	  @Produces(MediaType.APPLICATION_JSON)
	  public Collection<Sample> getSamples() {
		  //get database from ctx
		  return db.findAll();
	  }

	  @POST
	  @Path("/")
	  @Produces(MediaType.APPLICATION_JSON)
	  public Product createSample(Sample product) {
	      // save sample to database 
	  }

	  @GET
	  @Path("/{id}")
	  @Produces(MediaType.APPLICATION_JSON)
	  public Sample getSample(int id)
	  {
	      // get sample with specifies id from database from ctx
	  }
  }
#+END_SRC



** Frontend environment

Vue.js is used



** Development Environment 


backend: https://needhamia.com/how-to/java-software-development/create-a-jersey-web-project-using-maven-tomcat-and-eclipse/

To build and deploy backend:


run in project root:


#+BEGIN_SRC shell
  mvn clean install
#+END_SRC

then go to localhost:8080/manager and enter your credentials (e.g. manager and Sekrit) and use web tool to deploy your app


Frontend: Visual Studio Code with Vue.js 

* Model

** Introduction


every model has its unique identifier.



** User

+ username
+ password
+ firstnamme
+ lastname
+ tyjpe (Buyer, Seller, Admin)
+ phone 
+ city -> City
+ email
+ registration date


** Buyer 

+ user -> User


** Admin

+ user -> User 


** Seller 

+ user -> User


** City

+ name
+ country


** Item

+ name
+ description
+ image
+ seller -> Seller
+ price
+ likes
+ dislikes
+ due date
+ creation date
+ city -> City
+ active (TRUE / FALSE)
+ category -> Category


** Category

+ name
+ description 

** Order

+ buyer -> Buyer
+ item -> Item
+ status (PENDING, SHIPPING, SHIPPED)


** OrderReview 

+ title
+ body
+ image
+ type (NOT_GOT_DESCRIBED, NOT_GOT, BAD_COMMUNICATION)
+ buyer -> Buyer
+ order -> Order


** BuyerFavoriteItem 

+ item -> Item
+ buyer -> Buyer



** BuyerSellerLike

+ buyer -> Buyer
+ seller -> Seller
+ like (TRUE if like, FALSE if dislike)




** Comment 

+ user -> User
+ body
+ item -> Item 


** Message

+ item -> Item 
+ title
+ body
+ buyer -> Buyer
+ unread 


** Conversation 

+ initial_message -> Message
+ from -> User
+ body -> string


** FromAdminMessage

+ admin -> Admin
+ title
+ body
+ to -> User


** ToAdminMessage

+ from -> Seller
+ to -> Admin
+ title
+ body



** ItemReport

+ item -> Item
+ title
+ body
+ buyer -> Buyer 


** SellerReport 

+ seller -> Seller
+ buyer -> Buyer 
+ title
+ body 



* Session management and login

** Login

session is used to store login information 

#+BEGIN_SRC java
  package services;

  import javax.annotation.PostConstruct;
  import javax.servlet.ServletContext;
  import javax.servlet.http.HttpServletRequest;
  import javax.ws.rs.Consumes;
  import javax.ws.rs.GET;
  import javax.ws.rs.POST;
  import javax.ws.rs.Path;
  import javax.ws.rs.Produces;
  import javax.ws.rs.core.Context;
  import javax.ws.rs.core.MediaType;
  import javax.ws.rs.core.Response;

  import beans.User;
  import dao.UserDAO;

  @Path("")
  public class LoginService {
	
	  @Context
	  ServletContext ctx;
	
	  public LoginService() {
		
	  }
	
	  @PostConstruct
	  // ctx polje je null u konstruktoru, mora se pozvati nakon konstruktora (@PostConstruct anotacija)
	  public void init() {
		  // Ovaj objekat se instancira viï¿½e puta u toku rada aplikacije
		  // Inicijalizacija treba da se obavi samo jednom
		  if (ctx.getAttribute("userDAO") == null) {
		  String contextPath = ctx.getRealPath("");
			  ctx.setAttribute("userDAO", new UserDAO(contextPath));
		  }
	  }
	
	  @POST
	  @Path("/login")
	  @Consumes(MediaType.APPLICATION_JSON)
	  @Produces(MediaType.APPLICATION_JSON)
	  public Response login(User user, @Context HttpServletRequest request) {
		  UserDAO userDao = (UserDAO) ctx.getAttribute("userDAO");
		  User loggedUser = userDao.find(user.getUsername(), user.getPassword());
		  if (loggedUser != null) {
			  return Response.status(400).entity("Invalid username and/or password").build();
		  }
		  request.getSession().setAttribute("user", loggedUser);
		  return Response.status(200).build();
	  }
	
	
	  @POST
	  @Path("/logout")
	  @Consumes(MediaType.APPLICATION_JSON)
	  @Produces(MediaType.APPLICATION_JSON)
	  public void logout(@Context HttpServletRequest request) {
		  request.getSession().invalidate();
	  }
	
	  @GET
	  @Path("/currentUser")
	  @Consumes(MediaType.APPLICATION_JSON)
	  @Produces(MediaType.APPLICATION_JSON)
	  public User login(@Context HttpServletRequest request) {
		  return (User) request.getSession().getAttribute("user");
	  }
  }

#+END_SRC


* Database and storage

** Introduction 

storage interface will be created 

** Reuse from Instafram 

it can be reused file system storage from InstaFram codebase 

** JSON filesystem storage 

filesystem storage can be implemented to use json instead of InstaFram format 


* Security

** XSS protection 

** CLRF protection 

** Hashing of passwords 

** Session protection 



* Frontend development

** Structure of modules 

every modules corresponds to one service in REST (for instance, User module corresponds to User service at "api/users/"). 

every module corresponds to one widget which is enclosed in div element with class "widget-modulename-type". For example, widget for User profile would be "widget-user-single".


Types are listed below:

| Type        | corresponding string in class | HTTP REST method on given service |
| single      | single                        | GET api/users/1                   |
| multi       | multi                         | GET api/users/                    |
| single-edit | single-edit                   | PUT api/users/1                   |
| new         | new                           | POST api/users/                   |


single and single-edit types have additional parameter: id 


new and single-edit types also have submit method:

#+BEGIN_SRC js
  var app5 = new Vue({
    el: '.widget-user-single-edit',
    data: {
      // ...
    },
    methods: {
      submit: function () {
	// call User service here
      }
    }
  })
#+END_SRC

all information in method involving model is stored in "this" implicit object



Every widget is Vue component with "id" as its property for single and single-edit component types:

#+BEGIN_SRC js
  Vue.component('todo-item', {
    // The todo-item component now accepts a
    // "prop", which is like a custom attribute.
    // This prop is called todo.
    props: ['todo'],
    template: '<li>{{ todo.text }}</li>'
  })
#+END_SRC

where multi type component is just calling single component in for loop

#+BEGIN_SRC js
  <div id="app-7">
    <ol>
      <!--
	Now we provide each todo-item with the todo object
	it's representing, so that its content can be dynamic.
	We also need to provide each component with a "key",
	which will be explained later.
      -->
      <todo-item
	v-for="item in groceryList"
	v-bind:todo="item"
	v-bind:key="item.id"
      ></todo-item>
    </ol>
  </div>
#+END_SRC


all single and single-edit widgets as well as multi widgets have to have "created" property asssigned to them such that thewy can load data from the service 

#+BEGIN_SRC js
  // component definition
  created: function () {
      // `this` points to the vm instance
      this = User.get(id);
    }
  // end component definition
#+END_SRC


dynamic values which depend on subset of arameters from model are inserted into "computed" dict:

#+BEGIN_SRC js
  var vm = new Vue({
    el: '#demo',
    data: {
      firstName: 'Foo',
      lastName: 'Bar'
    },
    computed: {
      fullName: function () {
	return this.firstName + ' ' + this.lastName
      }
    }
  })
#+END_SRC

widgets can have its own events which can be triggered with $emit("eventname")


** Utilities 

Special message styles can be shown as separate widget using slots"

#+BEGIN_SRC js
  Vue.component('alert-box', {
    template: `
      <div class="demo-alert-box">
	<strong>Error!</strong>
	<slot></slot>
      </div>
    `
  })
#+END_SRC


** Routing

#+BEGIN_SRC js
  <component v-bind:is="currentTabComponent"></component>

#+END_SRC


** Single file components 

https://vuejs.org/v2/guide/single-file-components.html

** Communication with API

#+BEGIN_SRC js
  new Vue({
    el: '#app',
    data () {
      return {
	info: null,
	loading: true,
	errored: false
      }
    },
    filters: {
      currencydecimal (value) {
	return value.toFixed(2)
      }
    },
    mounted () {
      axios
	.get('https://api.coindesk.com/v1/bpi/currentprice.json')
	.then(response => {
	  this.info = response.data.bpi
	})
	.catch(error => {
	  console.log(error)
	  this.errored = true
	})
	.finally(() => this.loading = false)
    }
  })

  <div id="app">
    <h1>Bitcoin Price Index</h1>

    <section v-if="errored">
      <p>We're sorry, we're not able to retrieve this information at the moment, please try back later</p>
    </section>

    <section v-else>
      <div v-if="loading">Loading...</div>

      <div
	v-else
	v-for="currency in info"
	class="currency"
      >
	{{ currency.description }}:
	<span class="lighten">
	  <span v-html="currency.symbol"></span>{{ currency.rate_float | currencydecimal }}
	</span>
      </div>

    </section>
  </div>
#+END_SRC



** Authentication and authorization 

https://www.techiediaries.com/vue-vuex-axios-auth/

** Handling session cookies in axios

#+BEGIN_SRC js
  axios.defaults.withCredentials = true  // enable axios post cookie, default false

#+END_SRC


* Additional endpoints for services 

** Item -> status 

+ Path: =/Item/{id}/status=
+ Returns APIStatus 

description of APIStatus

| code | message  |
|    0 | PENDING  |
|    1 | SHIPPING |
|    2 | SHIPPED  |


this endpoint can be used to check if item can be deleted (only in PENDING state)

status if PENDING if there is no order with different status 

status is SHIPPING if there is noo order with SHIPPED status but there is with SHIPPING

sttatus is SHIPPED if aall orders are in state SHIPPED


** Seller -> items

Path: =/Seller/{id}/items=

Returns list of all items belonging to given seller 

* Message support 

** Getting messages to current user

Path: =/Message/=

Method: GET

if user is seller: This endpoint lists all messages TO current user 

if user is buyer: lists messages FROM current user

** Getting reply to the message

Path: =/Message/{id}/reply=

METHOD: GET 

This nedpoint gets reply for specified message or returns null if there is no any.

** Sending message

Path: =/Message/=

Method: POST

send message to specific user FROM current user 



** Sending for specific item

Path: =/Item/{id}/message=

Method: POST

Send message to seller of given item 

** Get replies for specific message 

Path: =/Message/{id}/reply=

Method: GET

* Routing

https://appdividend.com/2018/12/28/vue-router-tutorial-with-example-how-to-use-routing-in-vuejs/

** Redirecting programmatically

Use: 

#+BEGIN_SRC js
  this.$router.push('/home');
#+END_SRC

